<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <%- include('../../views/partials/user/header') %>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .main-container {
            width: 100%;
            padding: 20px 40px;
            background-color: #fafafa;
            min-height: 100vh;
        }

        .order-details {
            max-width: 1200px;
            margin: 0 auto;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background-color: #fff;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        }

        .order-header h2 {
            color: #333;
            font-weight: 600;
            margin: 0;
        }

        .order-id {
            font-size: 1.1rem;
            color: #666;
        }

        .order-card {
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
            padding: 20px;
        }

        .order-card h5 {
            color: #333;
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 16px;
            padding-bottom: 8px;
            border-bottom: 2px solid #f0f0f0;
        }

        .order-status {
            font-size: 1.1rem;
            font-weight: 500;
            color: #dc3545;
        }

        .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
        }

        .table {
            margin-bottom: 0;
        }

        .table th {
            color: #333;
            font-weight: 600;
            background-color: #fafafa;
            border: none;
        }

        .table td {
            vertical-align: middle;
            color: #666;
            border: none;
        }

        .status-badge {
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 14px;
            color: white;
        }

        .status-pending { background: #ffc107; }
        .status-processing { background: #007bff; }
        .status-delivered { background: #28a745; }
        .status-cancelled { background: #6c757d; }
        .status-return-request { background: #17a2b8; }
        .status-returned { background: #28a745; }
        .status-return-denied { background: #dc3545; }

        .btn-danger, .btn-warning, .btn-primary, .btn-secondary {
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-danger { background: #dc3545; border: none; }
        .btn-danger:hover { background: #b02a37; }
        .btn-warning { background: #ffc107; border: none; color: #333; }
        .btn-warning:hover { background: #e0a800; }
        .btn-primary { background: #dc3545; border: none; }
        .btn-primary:hover { background: #b02a37; }
        .btn-secondary { background: #6c757d; border: none; }
        .btn-outline-primary {
            border: 1px solid #dc3545;
            color: #dc3545;
        }
        .btn-outline-primary:hover {
            background: #dc3545;
            color: white;
        }

        .order-summary {
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
            padding: 20px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            color: #666;
        }

        .summary-row.total-row {
            font-weight: 600;
            color: #333;
            border-top: 1px solid #e0e0e0;
            padding-top: 15px;
            margin-top: 10px;
        }

        .return-form {
            margin-top: 10px;
        }

        .returnReason {
            width: 100%;
            padding: 10px;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            margin-bottom: 10px;
        }

        @media (max-width: 768px) {
            .main-container {
                padding: 20px;
            }

            .order-header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .order-card {
                padding: 15px;
            }

            .product-image {
                width: 80px;
                height: 80px;
            }
        }
    </style>
</head>
<body>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <div class="main-container">
        <div class="order-details">
            <div class="order-header">
                <h2>Order Details</h2>
                <span class="order-id">#<%= order._id %></span>
            </div>

            <!-- Order Status -->
            <div class="order-card">
                <h5>Order Status</h5>
                <p>Order Date: <%= order.Date.getDate() %>-<%= order.Date.getMonth() + 1 %>-<%= order.Date.getFullYear() %></p>
            </div>

            <!-- Shipping Address -->
            <div class="order-card">
                <h5>Shipping Address</h5>
                <p><%= order.address.fullName %></p>
                <p><%= order.address.phone %></p>
                <p><%= order.address.city %></p>
                <p><%= order.address.street %></p>
                <p><%= order.address.state %></p>
                <p><%= order.address.zipcode %></p>
            </div>
            <input type="hidden" value="<%= order._id %>" id="orderId">

            <!-- Order Items -->
            <div class="order-card">
                <h5>Order Items</h5>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Name</th>
                                <th class="text-center">Quantity</th>
                                <th class="text-center">Regular Price</th>
                                <th class="text-center">Sales Price</th>
                                <th class="text-end">Total</th>
                                <th>Action</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% if (order && order.orderItems && order.orderItems.length > 0) { %>
                                <% order.orderItems.forEach(item => { %>
                                    <tr>
                                        <td>
                                            <img src="/uploads/re-images/<%= item.productImage %>" alt="" class="product-image">
                                        </td>
                                        <td><h6 class="mb-0"><%= item.productName %></h6></td>
                                        <td class="text-center"><%= item.quantity %></td>
                                        <td class="text-center">₹ <%= item.price + (item.subdiscount / item.quantity) %></td>
                                        <td class="text-center">₹ <%= item.price %></td>
                                        <td class="text-end">₹ <%= item.quantity * item.price %></td>
                                        <td>
                                            <% if (item.orderStatus.toLowerCase() === 'cancelled') { %>
                                                <button class="btn btn-secondary" disabled>Cancelled</button>
                                            <% } else if (item.orderStatus.toLowerCase() === 'delivered') { %>
                                                <button class="btn btn-warning returnOrder" 
                                                        data-product-id="<%= item._id %>" 
                                                        data-order-id="<%= order._id %>">
                                                    Return
                                                </button>
                                                <div class="return-form" id="return-form-<%= item._id %>" style="display: none;">
                                                    <textarea class="form-control returnReason" placeholder="Enter return reason" required></textarea>
                                                    <button class="btn btn-primary submitReturn" 
                                                            data-product-id="<%= item._id %>" 
                                                            data-order-id="<%= order._id %>">
                                                        Submit
                                                    </button>
                                                </div>
                                            <% } else if (item.orderStatus.toLowerCase() === 'return request') { %>
                                                <span class="text-primary">Return Request Processing</span>
                                                <p><strong>Return Reason:</strong> <%= item.returnReason ? item.returnReason : 'No reason provided' %></p>
                                            <% } else if (item.orderStatus.toLowerCase() === 'returned') { %>
                                                <span class="text-success">Returned</span>
                                            <% } else if (item.orderStatus.toLowerCase() === 'return denied') { %>
                                                <span class="text-danger">Return Denied</span>
                                            <% } else { %>
                                                <button class="btn btn-danger cancelOrder" 
                                                        data-product-id="<%= item._id %>" 
                                                        data-order-id="<%= order._id %>">
                                                    Cancel
                                                </button>
                                            <% } %>
                                        </td>
                                        <td>
                                            <span class="status-badge status-<%= item.orderStatus.toLowerCase().replace(' ', '-') %>">
                                                <%= item.orderStatus %>
                                            </span>
                                        </td>
                                    </tr>
                                <% }) %>
                            <% } else { %>
                                <tr>
                                    <td colspan="8" class="text-center">No order items found.</td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="order-summary">
                <h5>Order Summary</h5>
                <div class="summary-row">
                    <span>Subtotal</span>
                    <span>₹ <%= Totalprice %></span>
                </div>
                <% if (order.totalOfferDiscount > 0) { %>
                    <div class="summary-row">
                        <span>Offer Discount</span>
                        <span>-₹ <%= order.totalOfferDiscount %></span>
                    </div>
                <% } %>
                <% if (order.couponApplied) { %>
                    <div class="summary-row">
                        <span>Coupon Discount (Code: <%= order.couponCode %>)</span>
                        <span>-₹ <%= order.discount %></span>
                    </div>
                <% } %>
                <div class="summary-row">
                    <span>Shipping</span>
                    <span>Free</span>
                </div>
                <div class="summary-row total-row">
                    <span>Total</span>
                    <span>₹ <%= order.finalAmount %></span>
                </div>
            </div>

            <!-- Buttons -->
            <div class="mt-4 d-flex gap-3">
                <button onclick="downloadInvoice('<%= order.orderId %>')" 
                        class="btn btn-primary" 
                        <%= order.orderItems.some(item => item.orderStatus === 'Payment failed') ? 'disabled' : '' %>>
                    <i class="fas fa-download me-2"></i> Download Invoice
                </button>
                <% if (order.paymentMethod === 'razorpay' && order.orderItems.some(item => item.orderStatus === 'Payment failed')) { %>
                    <button class="btn btn-success payNow" 
                            data-order-id="<%= order._id %>" 
                            data-amount="<%= order.finalAmount %>">
                        Pay Now
                    </button>
                <% } %>
                <a href="/orders" class="btn btn-outline-primary">Back to Orders</a>
            </div>
        </div>
    </div>

    <script>
        // Existing JavaScript code remains unchanged
        document.addEventListener('click', async (event) => {
            if (event.target.classList.contains('cancelOrder')) {
                const button = event.target;
                const productId = button.dataset.productId;
                const orderId = button.dataset.orderId;
                
                try {
                    const response = await fetch("/cancelOrder", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ orderId, productId })
                    });

                    const data = await response.json();

                    if (data.success) {
                        button.textContent = "Cancelled";
                        button.classList.remove('btn-danger');
                        button.classList.add('btn-secondary');
                        button.disabled = true;

                        const statusElement = button.closest('tr').querySelector('.status-badge');
                        if (statusElement) {
                            statusElement.textContent = "Cancelled";
                            statusElement.classList.remove('status-pending', 'status-processing', 'status-delivered');
                            statusElement.classList.add('status-cancelled');
                        }
                    } else {
                        alert(data.message || "Failed to cancel order.");
                    }
                } catch (error) {
                    console.error("Error cancelling order:", error);
                    alert("Something went wrong. Please try again.");
                }
            }
        });

        document.addEventListener('click', (event) => {
            if (event.target.classList.contains('returnOrder')) {
                const productId = event.target.dataset.productId;
                document.getElementById(`return-form-${productId}`).style.display = 'block';
            }
        });

        document.addEventListener('click', async (event) => {
            if (event.target.classList.contains('submitReturn')) {
                const productId = event.target.dataset.productId;
                const orderId = event.target.dataset.orderId;
                const reasonInput = document.querySelector(`#return-form-${productId} .returnReason`);
                const reason = reasonInput.value.trim();

                if (!reason) {
                    Swal.fire({
                        icon: "warning",
                        title: "Missing Reason",
                        text: "Please enter a reason for return.",
                    });
                    return;
                }

                try {
                    const response = await fetch("/returnOrder", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ orderId, productId, returnReason: reason })
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            icon: "success",
                            title: "Return Request Submitted!",
                            text: "Your return request has been submitted successfully.",
                            showConfirmButton: false,
                            timer: 2000
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: data.message || "Failed to process return request.",
                        });
                    }
                } catch (error) {
                    console.error("Error processing return:", error);
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Something went wrong. Please try again.",
                    });
                }
            }
        });

        function downloadInvoice(orderId) {
            const btn = event.target.closest('button');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-hourglass-start me-2"></i>Generating...';
            btn.disabled = true;

            try {
                window.location.href = `/order/download-invoice/${orderId}`;
                setTimeout(() => {
                    btn.innerHTML = originalText;
                    btn.disabled = false;
                }, 3000);
            } catch (error) {
                console.error('Error downloading invoice:', error);
                alert('Failed to download invoice. Please try again later.');
                btn.innerHTML = originalText;
                btn.disabled = false;
            }
        }

        document.addEventListener('click', async (event) => {
            if (event.target.classList.contains('payNow')) {
                const button = event.target;
                const orderId = button.dataset.orderId;
                const amount = button.dataset.amount;

                try {
                    const response = await fetch('/initiate-payment', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ orderId, amount })
                    });
                    const data = await response.json();

                    if (!data.success) {
                        alert(data.message || 'Failed to initiate payment');
                        return;
                    }

                    const options = {
                        key: '<%= razorpayKeyId %>',
                        amount: data.amount,
                        currency: 'INR',
                        name: 'The Perfume Co.',
                        description: `Payment for Order #${orderId}`,
                        order_id: data.razorpayOrderId,
                        handler: async function (response) {
                            const verifyResponse = await fetch('/verify-payment', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_signature: response.razorpay_signature
                                })
                            });
                            const verifyData = await verifyResponse.json();

                            if (verifyData.success) {
                                alert('Payment successful! Order status updated to Processing.');
                                location.reload();
                            } else {
                                alert('Payment verification failed.');
                            }
                        },
                        prefill: {
                            name: '<%= order.address.fullName %>',
                            email: '<%= userEmail %>',
                            contact: '<%= order.address.phone %>'
                        },
                        theme: {
                            color: '#dc3545'
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.on('payment.failed', async function (response) {
                        try {
                            const failResponse = await fetch('/payment-failed', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                    orderId,
                                    razorpay_order_id: response.error.metadata.order_id,
                                    razorpay_payment_id: response.error.metadata.payment_id,
                                    error: response.error
                                })
                            });
                            const failData = await failResponse.json();

                            if (failData.success) {
                                alert('Payment failed again. You can retry from the order details.');
                                location.reload();
                            } else {
                                alert('Failed to update payment status: ' + failData.message);
                            }
                        } catch (error) {
                            console.error('Error notifying server of retry failure:', error);
                            alert('Payment failed, and an error occurred.');
                        }
                    });
                    rzp.open();
                } catch (error) {
                    console.error('Error initiating payment:', error);
                    alert('Something went wrong. Please try again.');
                }
            }
        });
    </script>
</body>
</html>