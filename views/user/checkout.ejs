<%- include("../../views/partials/user/header") %>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f4;
    }

    .checkout-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px 40px;
        background-color: #fafafa;
        min-height: 100vh;
    }

    .page-title {
        color: #333;
        font-weight: 600;
        margin-bottom: 30px;
    }

    .checkout-grid {
        display: grid;
        grid-template-columns: 3fr 2fr;
        gap: 25px;
    }

    @media (max-width: 768px) {
        .checkout-grid {
            grid-template-columns: 1fr;
        }
        .checkout-container {
            padding: 20px;
        }
    }

    .checkout-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.05);
        margin-bottom: 25px;
        padding: 20px;
    }

    .checkout-card h5 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin-bottom: 16px;
        padding-bottom: 8px;
        border-bottom: 2px solid #f0f0f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .checkout-card h5 .btn {
        font-size: 14px;
    }

    .address-card {
        border: 1px solid #e5e5e5;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        transition: all 0.3s ease;
    }

    .address-card:hover {
        border-color: #dc3545;
        background: #f8f9ff;
    }

    .address-card input[type="radio"] {
        margin-right: 10px;
    }

    .address-details {
        margin-top: 10px;
        color: #666;
    }

    .payment-options {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .payment-option {
        display: flex;
        align-items: center;
        padding: 10px 15px;
        border: 1px solid #e5e5e5;
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .payment-option:hover {
        border-color: #dc3545;
        background: #f8f9ff;
    }

    .payment-option input[type="radio"] {
        margin-right: 10px;
    }

    .coupon-section {
        margin-bottom: 20px;
    }

    .coupon-input {
        display: flex;
        gap: 10px;
        margin-bottom: 15px;
    }

    .coupon-input input {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
    }

    #coupon-result {
        margin-top: 10px;
    }

    .available-coupons {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        margin-top: 15px;
        background-color: #f9f9f9;
    }

    .coupon-option {
        padding: 10px;
        margin-bottom: 5px;
        cursor: pointer;
        border-bottom: 1px solid #e0e0e0;
    }

    .coupon-option:hover {
        background-color: #f1f1f1;
    }

    .order-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

    .order-table th,
    .order-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #e0e0e0;
    }

    .order-table th {
        color: #333;
        font-weight: 600;
        background-color: #fafafa;
    }

    .price-summary {
        margin-top: 20px;
    }

    .price-row {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        color: #666;
    }

    .price-row.total {
        font-weight: 600;
        color: #333;
        border-top: 1px solid #e0e0e0;
        padding-top: 15px;
        margin-top: 10px;
    }

    .btn-primary, .btn-outline-info, .btn-secondary, .btn-danger, .btn-info {
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: #dc3545;
        border: none;
        color: white;
        width: 100%;
        margin-top: 20px;
    }

    .btn-primary:hover {
        background: #b02a37;
    }

    .btn-outline-info {
        border: 1px solid #17a2b8;
        color: #17a2b8;
        background: none;
    }

    .btn-outline-info:hover {
        background: #17a2b8;
        color: white;
    }

    .btn-secondary {
        background: #6c757d;
        border: none;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
    }

    .btn-danger {
        background: #dc3545;
        border: none;
        color: white;
    }

    .btn-danger:hover {
        background: #b02a37;
    }

    .btn-info {
        background: #17a2b8;
        border: none;
        color: white;
    }

    .btn-info:hover {
        background: #138496;
    }

    /* Section specific styles */
    #remove-coupon {
        display: none;
    }
</style>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="checkout-container">
    <h1 class="page-title">Order Checkout</h1>
    <div class="checkout-grid">
        <div>
            <!-- Delivery Address Section -->
            <div class="checkout-card">
                <h5>
                    Delivery Address
                    <a href="/add-address" class="btn btn-outline-info">Add New Address</a>
                </h5>
                <div id="saved-addresses">
                    <% if (addresses && addresses.length > 0) { %>
                        <% addresses.forEach(addr => { %>
                            <div class="address-card">
                                <input type="radio" name="deliveryAddress" value="<%= addr._id %>" id="address-<%= addr._id %>" />
                                <strong><%= addr.fullName %></strong>
                                <div class="address-details">
                                    <p><%= addr.phone %></p>
                                    <p><%= addr.street %>, <%= addr.city %>, <%= addr.state %>, <%= addr.zipcode %></p>
                                </div>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <p>No saved addresses found. Please add a delivery address.</p>
                    <% } %>
                </div>
            </div>

            <!-- Payment Options Section -->
            <div class="checkout-card">
                <h5>Payment Method</h5>
                <div class="payment-options">
                    <label class="payment-option">
                        <input type="radio" name="paymentMethod" value="COD" checked />
                        Cash on Delivery (COD)
                    </label>
                    <label class="payment-option">
                        <input type="radio" name="paymentMethod" value="razorpay" />
                        Pay Online with Razorpay
                    </label>
                    <label class="payment-option">
                        <input type="radio" name="paymentMethod" value="wallet" />
                        Pay from Wallet
                    </label>
                </div>
            </div>
        </div>

        <div>
            <!-- Coupon Section -->
            <div class="checkout-card">
                <h5>Apply Coupon</h5>
                <div class="coupon-input">
                    <input type="text" id="coupon-code" placeholder="Enter coupon code">
                    <button id="apply-coupon" class="btn btn-secondary">Apply</button>
                </div>
                <div class="coupon-actions" style="display: flex; gap: 10px; margin-top: 10px;">
                    <button id="remove-coupon" class="btn btn-danger">Remove</button>
                    <button id="show-coupons" class="btn btn-info">Available Coupons</button>
                </div>
                <div id="coupon-result" class="mt-2"></div>
                <div id="available-coupons-container" class="available-coupons" style="display: none;">
                    <h4>Available Coupons:</h4>
                    <div id="available-coupons-list">
                        <!-- Dynamically populated coupons -->
                    </div>
                </div>
                <div>
                  <p class="text-info"> Coupon Applied Orders cannot be Cancelled and Returned</p>
                </div>
            </div>

            <!-- Order Summary Section -->
            <div class="checkout-card">
                <h5>Order Summary</h5>
                <table class="order-table" data-cart-id="<%= cartId %>">
                    <thead>
                        <tr>
                            <th>Item</th>
                            <th>Quantity</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% cart.forEach(item => { %>
                            <tr>
                                <td><%= item.productId.productName %></td>
                                <td><%= item.quantity %></td>
                                <td>₹ <%= (item.price).toFixed(2) %></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
                <div class="price-summary">
                    <div class="price-row">
                        <span>Subtotal:</span>
                        <span>₹ <span id="subtotal"><%= total.toFixed(2) %></span></span>
                    </div>
                    <div class="price-row">
                        <span>Coupon Discount:</span>
                        <!-- <span>- ₹ <span id="coupon-discount">0.00</span></span> -->
                        <span>- ₹ <span id="couponDiscount">0.00</span></span>
                       
                    </div>
                    <div class="price-row total">
                        <span>Total Amount:</span>
                        <input id="total" type="hidden" value="<%= total.toFixed(2) %>">
                        <span id="final-total">₹ <%= total.toFixed(2) %></span>
                    </div>
                </div>

                <button id="place-order" class="btn btn-primary">Place Order</button>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
// Order placement script
let isCouponApplied = false;
  let appliedCoupon = "";
  let currentDiscount = 0;
document.addEventListener("DOMContentLoaded", function () {
  const placeOrderBtn = document.getElementById("place-order");
  let orderId;  // Custom UUID
  let mongoId;  // MongoDB _id

  placeOrderBtn.addEventListener("click", handleOrderPlacement);

  async function handleOrderPlacement(event) {
    event.preventDefault();
    const selectedAddress = document.querySelector('input[name="deliveryAddress"]:checked');
    if (!selectedAddress) {
      swal({ title: "Error!", text: "Please select a delivery address.", icon: "error", button: "OK" });
      return;
    }

    const addressId = selectedAddress.value;
    const cartId = document.querySelector("[data-cart-id]").getAttribute("data-cart-id");
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
    const finalAmount = parseFloat(document.getElementById("total").value);
    const couponCode = document.getElementById('coupon-code').value;
    const couponDiscount = currentDiscount;
    // const coupon-discount
    const couponapplied = isCouponApplied

    try {
      placeOrderBtn.disabled = true;
      placeOrderBtn.innerText = "Processing...";

      const response = await fetch("/create-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ addressId, cartId, paymentMethod, finalAmount,couponapplied,
        couponCode,
        couponDiscount }),
      });
      const data = await response.json();

      if (data.success) {
        orderId = data.orderId;  // Store UUID
        mongoId = data.mongoId;  // Store _id

        if (paymentMethod === "razorpay") {
          const options = {
            key: "<%= process.env.RAZORPAY_KEY_ID %>",
            amount: finalAmount * 100,
            currency: "INR",
            name: "The Perfume Co.",
            description: "Test Transaction",
            order_id: data.razorpayOrderId,
            handler: async function (response) {
              try {
                const verifyResponse = await fetch('/verify-payment', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    orderId: orderId, // Use UUID for initial payment
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_signature: response.razorpay_signature
                  })
                });
                const verifyData = await verifyResponse.json();

                if (verifyData.success) {
                  swal({
                    title: "Success!",
                    text: "Order Placed Successfully!",
                    icon: "success",
                    button: "Continue",
                  }).then(() => {
                    window.location.href = `/order-placed?orderId=${orderId}`;
                  });
                } else {
                  swal({
                    title: "Error!",
                    text: verifyData.message || "Payment verification failed.",
                    icon: "error",
                    button: "OK",
                  });
                }
              } catch (error) {
                console.error("Verification error:", error);
                swal({
                  title: "Error!",
                  text: "An error occurred during payment verification.",
                  icon: "error",
                  button: "OK",
                });
              }
            },
            prefill: {
              name: "<%= userData.name %>",
              email: "<%= userData.email %>",
              contact: "<%= userData.phone %>",
            },
            theme: { color: "#dc3545" }
          };

          const rzp1 = new Razorpay(options);
          rzp1.on("payment.failed", async function (response) {
            console.log("Payment Failed Response:", response);
            try {
              const failResponse = await fetch('/payment-failed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  orderId: orderId, // Use UUID for initial failure
                  razorpay_order_id: response.error.metadata.order_id,
                  razorpay_payment_id: response.error.metadata.payment_id,
                  error: response.error
                })
              });
              const failData = await failResponse.json();

              if (failData.success) {
                swal({
                  title: "Payment Failed!",
                  text: "Your payment was unsuccessful. You can retry from the order details page.",
                  icon: "error",
                  buttons: {
                    goToOrder: { text: "Go to Order Details", value: "orderDetails" },
                    ok: { text: "OK", value: "ok" },
                  },
                }).then((value) => {
                  if (value === "orderDetails" && orderId) {
                    window.location.href = `/viewOrder?orderId=${orderId}`;
                  } else if (value === "orderDetails") {
                    swal("Error", "Order ID not found!", "error");
                  }
                });
              } else {
                swal({
                  title: "Error!",
                  text: failData.message || "Failed to update payment status.",
                  icon: "error",
                  button: "OK",
                });
              }
            } catch (error) {
              console.error("Error notifying server of payment failure:", error);
              swal({
                title: "Error!",
                text: "Payment failed, and an error occurred.",
                icon: "error",
                button: "OK",
              });
            }
          });
          rzp1.open();
        } else {
          swal({
            title: "Success!",
            text: "Order Placed Successfully!",
            icon: "success",
            button: "Continue",
          }).then(() => {
            window.location.href = `/order-placed?orderId=${orderId}`;
          });
        }
      } else {
        swal({
          title: "Error!",
          text: data.message || "Failed to place order.",
          icon: "error",
          button: "OK",
        });
      }
    } catch (error) {
      console.error("Order placement error:", error);
      swal({
        title: "Error!",
        text: "Something went wrong while placing your order.",
        icon: "error",
        button: "OK",
      });
    } finally {
      placeOrderBtn.disabled = false;
      placeOrderBtn.innerText = "Place Order";
    }
  }
});

// Coupon handling script
document.addEventListener('DOMContentLoaded', () => {
  const applyCouponBtn = document.getElementById('apply-coupon');
  const showCouponsBtn = document.getElementById('show-coupons');
  const couponResultDiv = document.getElementById('coupon-result');
  const removeCouponBtn = document.getElementById('remove-coupon');
  const availableCouponsContainer = document.getElementById('available-coupons-container');
  const availableCouponsList = document.getElementById('available-coupons-list');

  // Initialize variables
  isCouponApplied = false;
  appliedCoupon = "";
  currentDiscount = 0;
  const originalTotal = parseFloat(document.getElementById('total').value);

  async function fetchAvailableCoupons() {
    try {
      const response = await fetch('/get-available-coupons');
      const coupons = await response.json();

      availableCouponsList.innerHTML = ''; // Clear previous entries

      if (coupons.length === 0) {
        availableCouponsList.innerHTML = '<div>No coupons available.</div>';
        return;
      }

      coupons.forEach(coupon => {
        const couponDiv = document.createElement('div');
        couponDiv.className = 'coupon-option';
        couponDiv.textContent = `${coupon.code} - ₹${coupon.offerPrice} off (Min ₹${coupon.minimumPrice})`;
        
        // Add click event to auto-fill input field
        couponDiv.addEventListener('click', () => {
          document.getElementById('coupon-code').value = coupon.code;
          document.getElementById('available-coupons-container').style.display = 'none';
        });

        availableCouponsList.appendChild(couponDiv);
      });
    } catch (error) {
      console.error('Error fetching coupons:', error);
      document.getElementById('available-coupons-list').innerHTML = '<div>Error loading coupons.</div>';
    }
  }

  showCouponsBtn.addEventListener('click', () => {
    if (availableCouponsContainer.style.display === 'none') {
      fetchAvailableCoupons();
      availableCouponsContainer.style.display = 'block';
    } else {
      availableCouponsContainer.style.display = 'none';
    }
  });

  async function applyCoupon(couponCode) {
    if (!couponCode) {
      couponResultDiv.innerHTML = '<div class="text-danger">Please enter a coupon code</div>';
      return;
    }

    const total = parseFloat(document.getElementById('total').value) + currentDiscount; // Add back previous discount
    
    try {
      const response = await fetch('/apply-coupon', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ couponCode, total })
      });

      const result = await response.json();

      if (result.success) {
        currentDiscount = result.discount;
        couponResultDiv.innerHTML = `
          <div class="text-success">
            Coupon applied! You saved ₹${result.discount}
          </div>
        `;
        
        // Update discount display and total
       // document.getElementById('coupon-discount').textContent = currentDiscount.toFixed(2);
       document.getElementById('couponDiscount').textContent = currentDiscount.toFixed(2);
        const finalTotal = total - currentDiscount;
        document.getElementById('final-total').textContent = `₹${finalTotal.toFixed(2)}`;
        document.getElementById('total').value = finalTotal.toFixed(2);

        isCouponApplied = true;
        appliedCoupon = couponCode;
        removeCouponBtn.style.display = 'inline-block';
      } else {
        couponResultDiv.innerHTML = `
          <div class="text-danger">
            ${result.message}
          </div>
        `;
      }
    } catch (error) {
      couponResultDiv.innerHTML = '<div class="text-danger">Error applying coupon</div>';
    }
  }

  function removeCoupon() {
    if (!isCouponApplied) return;

    // Reset to original values
    const subtotal = originalTotal;
    //document.getElementById('coupon-discount').textContent = '0.00';
    document.getElementById('couponDiscount').textContent = '0.00';
    
    document.getElementById('final-total').textContent = `₹${subtotal.toFixed(2)}`;
    document.getElementById('total').value = subtotal.toFixed(2);
    
    couponResultDiv.innerHTML = '<div class="text-info">Coupon removed. You can apply another.</div>';
    
    isCouponApplied = false;
    appliedCoupon = "";
    currentDiscount = 0;
    removeCouponBtn.style.display = 'none';
  }

  applyCouponBtn.addEventListener('click', () => {
    const couponCode = document.getElementById('coupon-code').value;
    if (isCouponApplied) {
      removeCoupon(); // Remove existing coupon first
    }
    applyCoupon(couponCode);
  });

  removeCouponBtn.addEventListener('click', removeCoupon);
});
</script>

<%- include("../../views/partials/user/footer") %>